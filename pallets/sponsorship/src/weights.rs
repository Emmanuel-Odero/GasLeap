//! Autogenerated weights for pallet_sponsorship
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-e8ezs4ez-project-145-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_sponsorship
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/sponsorship/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_sponsorship.
pub trait WeightInfo {
	fn create_pool() -> Weight;
	fn fund_pool() -> Weight;
	fn update_pool_config() -> Weight;
	fn add_authorization_rule() -> Weight;
	fn remove_authorization_rule() -> Weight;
	fn sponsor_transaction() -> Weight;
}

/// Weights for pallet_sponsorship using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Sponsorship NextPoolId (r:1 w:1)
	/// Proof: Sponsorship NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Sponsorship Pools (r:0 w:1)
	/// Proof: Sponsorship Pools (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	/// Storage: Sponsorship PoolOwners (r:0 w:1)
	/// Proof: Sponsorship PoolOwners (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1489`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Sponsorship Pools (r:1 w:1)
	/// Proof: Sponsorship Pools (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	fn fund_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `400`
		//  Estimated: `3465`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3465)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Sponsorship Pools (r:1 w:1)
	/// Proof: Sponsorship Pools (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	fn update_pool_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `400`
		//  Estimated: `3465`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3465)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Sponsorship Pools (r:1 w:0)
	/// Proof: Sponsorship Pools (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	/// Storage: Sponsorship PoolAuthorizations (r:0 w:1)
	/// Proof: Sponsorship PoolAuthorizations (max_values: None, max_size: Some(500), added: 2975, mode: MaxEncodedLen)
	fn add_authorization_rule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `400`
		//  Estimated: `3465`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3465)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Sponsorship Pools (r:1 w:0)
	/// Proof: Sponsorship Pools (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	/// Storage: Sponsorship PoolAuthorizations (r:0 w:1)
	/// Proof: Sponsorship PoolAuthorizations (max_values: None, max_size: Some(500), added: 2975, mode: MaxEncodedLen)
	fn remove_authorization_rule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `400`
		//  Estimated: `3465`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3465)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Sponsorship Pools (r:1 w:1)
	/// Proof: Sponsorship Pools (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	/// Storage: Sponsorship NextTransactionId (r:1 w:1)
	/// Proof: Sponsorship NextTransactionId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Sponsorship TransactionLog (r:0 w:1)
	/// Proof: Sponsorship TransactionLog (max_values: None, max_size: Some(1000), added: 2475, mode: MaxEncodedLen)
	fn sponsor_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `476`
		//  Estimated: `3465`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3465)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create_pool() -> Weight {
		Weight::from_parts(16_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn fund_pool() -> Weight {
		Weight::from_parts(13_000_000, 3465)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn update_pool_config() -> Weight {
		Weight::from_parts(12_000_000, 3465)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn add_authorization_rule() -> Weight {
		Weight::from_parts(11_000_000, 3465)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn remove_authorization_rule() -> Weight {
		Weight::from_parts(10_000_000, 3465)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn sponsor_transaction() -> Weight {
		Weight::from_parts(19_000_000, 3465)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}