# Demo Docker Compose - Optimized for hackathon judges
# Single command setup: docker-compose -f demo-compose.yml up -d
version: '3.8'

services:
  # GasLeap parachain node
  gasleap-node:
    build:
      context: .
      dockerfile: docker/Dockerfile.node
    ports:
      - "9944:9944"    # WebSocket RPC
      - "9933:9933"    # HTTP RPC
    volumes:
      - demo-gasleap-data:/data
    environment:
      - RUST_LOG=info
      - DEMO_MODE=true
    command: [
      "--dev",
      "--ws-external", 
      "--rpc-external",
      "--rpc-cors=all",
      "--base-path=/data",
      "--parachain-id=2000"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9933/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - demo-network

  # Astar local parachain (mock for demo)
  astar-local:
    image: parity/substrate:latest
    ports:
      - "9945:9944"    # WebSocket RPC
      - "9934:9933"    # HTTP RPC
    volumes:
      - demo-astar-data:/data
    environment:
      - RUST_LOG=info
    command: [
      "--dev",
      "--ws-external",
      "--rpc-external", 
      "--rpc-cors=all",
      "--base-path=/data",
      "--port=30334",
      "--chain=local"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9933/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - demo-network

  # Acala local parachain (mock for demo)
  acala-local:
    image: parity/substrate:latest
    ports:
      - "9946:9944"    # WebSocket RPC
      - "9935:9933"    # HTTP RPC
    volumes:
      - demo-acala-data:/data
    environment:
      - RUST_LOG=info
    command: [
      "--dev",
      "--ws-external",
      "--rpc-external",
      "--rpc-cors=all", 
      "--base-path=/data",
      "--port=30335",
      "--chain=local"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9933/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - demo-network

  # Demo data seeder
  demo-seeder:
    build:
      context: ./docker/scripts
      dockerfile: Dockerfile.seeder
    environment:
      - GASLEAP_ENDPOINT=ws://gasleap-node:9944
      - ASTAR_ENDPOINT=ws://astar-local:9944
      - ACALA_ENDPOINT=ws://acala-local:9944
    volumes:
      - demo-data:/data
    depends_on:
      gasleap-node:
        condition: service_healthy
      astar-local:
        condition: service_healthy
      acala-local:
        condition: service_healthy
    networks:
      - demo-network

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    ports:
      - "3000:3000"    # Frontend
    volumes:
      - demo-data:/data
    environment:
      - REACT_APP_GASLEAP_ENDPOINT=ws://gasleap-node:9944
      - REACT_APP_ASTAR_ENDPOINT=ws://astar-local:9944
      - REACT_APP_ACALA_ENDPOINT=ws://acala-local:9944
      - REACT_APP_API_ENDPOINT=http://api-server:3003
      - REACT_APP_DEMO_MODE=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - gasleap-node
      - api-server
      - demo-seeder
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - demo-network

  # Essential development tools for demo
  demo-postgres:
    image: postgres:15-alpine
    container_name: gasleap-demo-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=gasleap
      - POSTGRES_USER=gasleap
      - POSTGRES_PASSWORD=gasleap123
    volumes:
      - demo-postgres:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - demo-network

  demo-redis:
    image: redis:7-alpine
    container_name: gasleap-demo-redis
    ports:
      - "6379:6379"
    volumes:
      - demo-redis:/data
    command: redis-server --appendonly yes
    networks:
      - demo-network

  demo-mailhog:
    image: mailhog/mailhog:latest
    container_name: gasleap-demo-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - demo-network

  demo-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gasleap-demo-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@gasleap.dev
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - demo-pgadmin:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - demo-postgres
    networks:
      - demo-network

volumes:
  demo-data:
  demo-postgres:
  demo-redis:
  demo-pgadmin:

networks:
  demo-network:
    driver: bridge